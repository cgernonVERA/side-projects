!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)
test<-data%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = gsub(".*([A-Za-z]+)$", "", address))
test<-data%>%
head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = gsub(".*([A-Za-z]+)$", "", address))
test<-data%>%
head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = gsub(".*([A-Za-z]+)$", "//1", address))
address <- "263 HASTINGS BUFFALO NEW YORK14215"
# Extract all letters from the part with 5 numbers
letters_extracted <- str_extract(address, "[A-Za-z]+(?=\\d{5})")
# Print the extracted letters
print(letters_extracted)
test<-data%>%
head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"))
test<-data%>%
head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
zip_code = str_extract(text, "\\d{5}$"))
test<-data%>%
head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
zip_code = str_extract(address, "\\d{5}$"))
test<-data%>%
head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
zip_code = str_extract(address, "\\d{5}$"),
street= )
test<-data%>%
head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
zip_code = str_extract(address, "\\d{5}$"))
test<-data%>%
head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
zip_code = str_extract(address, "\\d{5}$"))
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
zip_code = str_extract(address, "\\d{5}$"))
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
zip_code = str_extract(address, "\\d{5}$"))%>%
filter(city != "BUFFALO")
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
zip_code = str_extract(address, "\\d{5}$"))%>%
filter(city != "BUFFALO" & city != "Buffalo")
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
zip_code = str_extract(address, "\\d{5}$"))
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
zip_code = str_extract(address, "\\d{5}$"))%>%
filter(city != "BUFFALO" & city != "Buffalo")
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
zip_code = str_extract(address, "\\d{5}$"))%>%
filter(city != "BUFFALO" & city != "Buffalo" & city != "buffalo")
unique(test$city)
table(test$city)
?grepl(())
?grepl()
clean_homeless<-data%>%
filter(grepl("homeless"), data$Address, ignore.case = T)
clean_homeless<-data%>%
filter(grepl("homeless"), data$Address, ignore.case = T)
clean_homeless<-data%>%
filter(grepl("homeless"), data$Address, ignore.case = TRUE)
clean_homeless<-data%>%
filter(grepl("homeless"), Address, ignore.case = TRUE)
clean_homeless<-data%>%
filter(grepl("homeless"), .$Address, ignore.case = TRUE)
clean_homeless<-data%>%
filter(grepl("homeless", .$Address, ignore.case = TRUE))
clean_homeless<-data%>%
filter(grepl("homeless|null", .$Address, ignore.case = TRUE))
View(clean_homeless)
clean_homeless<-data%>%
filter(grepl("homeless|null", .$Address, ignore.case = TRUE) | is.na(Address))
clean_homeless<-data%>%
filter(grepl("homeless|null", .$Address, ignore.case = TRUE) | is.na(Address))%>%
ChargeIdentifier(., "Charge.Information", group_var = sym("Inmate.ID"), only_PL_VTL = T)%>%
filter(top_charge == T)
number<- data%>%
ChargeIdentifier(., "Charge.Information", group_var = sym("Inmate.ID"), only_PL_VTL = T)%>%
filter(top_charge == T)
2364/17804
clean_homeless<-data%>%
filter(grepl("homeless|null", .$Address, ignore.case = TRUE) | is.na(Address))%>%
ChargeIdentifier(., "Charge.Information", group_var = sym("Inmate.ID"), only_PL_VTL = T)%>%
filter(top_charge == T)%>%
group_by(Admission.status)%>%
dplyr::summarise(N = n())
clean_homeless<-data%>%
filter(grepl("homeless|null", .$Address, ignore.case = TRUE) | is.na(Address))%>%
ChargeIdentifier(., "Charge.Information", group_var = sym("Inmate.ID"), only_PL_VTL = T)%>%
filter(top_charge == T)%>%
group_by(severity)%>%
dplyr::summarise(N = n())
View(test)
unique(test$city)
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
city = ifelse(grepl("buf", city, ignore.cse = T)),
zip_code = str_extract(address, "\\d{5}$"))
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
city = ifelse(grepl("buf", city, ignore.cse = T), "BUFFALO", city),
zip_code = str_extract(address, "\\d{5}$"))
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
city = ifelse(grepl("buf", city, ignore.case = T), "BUFFALO", city),
zip_code = str_extract(address, "\\d{5}$"))
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
city = ifelse(grepl("buf", city, ignore.case = T), "BUFFALO", city),
zip_code = str_extract(address, "\\d{5}$"),
street = str_extract(address, ".*(?=\\sBuffalo)"))
test2<-cxy_geocode(sample, street = 'stree', city = 'city', state = 'state', zip = 'zip_code',
return = 'locations', class = 'dataframe', output = 'simple')
install.packages("censusxy")
remotes::install_github("chris-prener/censusxy")
library(censusxy)
test2<-cxy_geocode(sample, street = 'stree', city = 'city', state = 'state', zip = 'zip_code',
return = 'locations', class = 'dataframe', output = 'simple')
test2<-cxy_geocode(sample, street = 'street', city = 'city', state = 'state', zip = 'zip_code',
return = 'locations', class = 'dataframe', output = 'simple')
colnames(test)
test2<-cxy_geocode(test, street = 'street', city = 'city', state = 'state', zip = 'zip_code',
return = 'locations', class = 'dataframe', output = 'simple')
View(test2)
?str_extract
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
city = ifelse(grepl("buf", city, ignore.case = T), "BUFFALO", city),
zip_code = str_extract(address, "\\d{5}$"),
street = str_extract(address, ".*(?=\\sBuffalo)|.*(?=\\sBUFFALO)"))
test<-data%>%
#head(100)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
city = ifelse(grepl("buf", city, ignore.case = T), "BUFFALO", city),
zip_code = str_extract(address, "\\d{5}$"),
street = str_extract(address, ".*(?=\\sBuffalo)|.*(?=\\sBUFFALO)"))%>%
filter(city == "BUFFALO")
test2<-cxy_geocode(test, street = 'street', city = 'city', state = 'state', zip = 'zip_code',
return = 'locations', class = 'dataframe', output = 'simple')
colnames(test2)
test2%>%
filter(!is.na(cxy_lon))
cleaned<-test2%>%
filter(!is.na(cxy_lon))
# Census data for Median Household Income
income_data_2020 <- get_acs(
geography = "tract",
variables = "B19013_001",
year = 2020,
state = "NY",
county = "Erie",
geometry = TRUE,
output = "wide",
key = "4ef39bbbf713f3d7e5f93edc1fc144a42d8b8377"
)
library(tidycensus)
# Census data for Median Household Income
income_data_2020 <- get_acs(
geography = "tract",
variables = "B19013_001",
year = 2020,
state = "NY",
county = "Erie",
geometry = TRUE,
output = "wide",
key = "4ef39bbbf713f3d7e5f93edc1fc144a42d8b8377"
)
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
geom_point(data = cleaned, aes(x = Longitude, y = Latitude), color = "red", size = 1, alpha = 0.25) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal() +
coord_sf(xlim = c(-74.895, -74.0), ylim = c(41.0, 41.7))  # Adjusted for a slightly more zoomed-out view
colnames(cleaned)
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.25) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal() +
coord_sf(xlim = c(-74.895, -74.0), ylim = c(41.0, 41.7))  # Adjusted for a slightly more zoomed-out view
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.25) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()
View(cleaned)
cleaned<-test2%>%
filter(!is.na(cxy_lon))%>%
filter(state = "NEW YORK")
cleaned<-test2%>%
filter(!is.na(cxy_lon))%>%
filter(state =="NEW YORK")
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.25) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()
cleaned<-test2%>%
filter(!is.na(cxy_lon))%>%
filter(state =="NEW YORK")%>%
filter(grepl("buffalo", city, ignore.case = T))
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
# geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
# geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()+
coord_sf(xlim = c(-79.1, -78.5), ylim = c(41.0, 41.7))  # Adjusted for a slightly more zoomed-out view
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
# geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()+
coord_sf(xlim = c(79.1, 78.5), ylim = c(41.0, 41.7))  # Adjusted for a slightly more zoomed-out view
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
# geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()+
coord_sf(xlim = c(-79.1, -78.5), ylim = c(41.0, 41.7))  # Adjusted for a slightly more zoomed-out view
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
# geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
# geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()+
coord_sf(xlim = c(-79.1, -78.5), ylim = c(41.0, 41.7))  # Adjusted for a slightly more zoomed-out view
# Cleaning Addresses for Geocoding:
# Filtering out non-New York addresses and those labeled "Homeless"
cleaned_data <- `Vera FOIL 2022` %>%
filter(!is.na(Address) & Address != "" &
!grepl("Homeless", Address, ignore.case = TRUE) &
grepl("New York", Address, ignore.case = TRUE)) %>%
# Removing apartment numbers and similar references
mutate(Address = gsub("\\bApt\\.?\\s?#?[0-9]+", "", Address)) %>%
# Trim spaces and ensure format consistency, especially for the ZIP code
mutate(Address = trimws(Address)) %>%
mutate(Address = ifelse(grepl("New York[0-9]{5}$", Address),
sub("([0-9]{5})$", " \\1", Address),
Address))
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
# geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
# geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()+
coord_sf(xlim = c(-79.1, -78.5), ylim = c(42.4, 43.1))  # Adjusted for a slightly more zoomed-out view
# Plotting
ggplot() +
geom_sf(data = income_data_2020, aes(fill = B19013_001E)) +
geom_point(data = cleaned, aes(x = cxy_lon, y = cxy_lat), color = "red", size = 1, alpha = 0.05) +  # Adjusted alpha for increased transparency
scale_fill_gradient(name = "Median Income", low = "lightblue", high = "darkblue") +
labs(title = "Median Household Income Map", subtitle = "Orange County, NY 2020") +
theme_minimal()+
coord_sf(xlim = c(-79.1, -78.5), ylim = c(42.4, 43.1))  # Adjusted for a slightly more zoomed-out view
getwd()
write.csv(cleaned, "buffalo.csv")
# Census data for Median Household Income
income_data_2020 <- get_acs(
geography = "block group",
variables = "B19013_001",
year = 2020,
state = "NY",
county = "Erie",
geometry = TRUE,
output = "wide",
key = "4ef39bbbf713f3d7e5f93edc1fc144a42d8b8377"
)
library(sf)
st_write(income_data_2020, "buffalo_income.shp")
st_write(income_data_2020, "buffalo_income.geojson")
View(variables)
View(variable)
variable = c( "B19013_001","B01003_001")
# Census data for Median Household Income
income_data_2020 <- get_acs(
geography = "block group",
variables = "variable"
year = 2020,
# Census data for Median Household Income
income_data_2020 <- get_acs(
geography = "block group",
variables = "variable"
year = 2020,
# Census data for Median Household Income
income_data_2020 <- get_acs(
geography = "block group",
variables = variable,
year = 2020,
state = "NY",
county = "Erie",
geometry = TRUE,
output = "wide",
key = "4ef39bbbf713f3d7e5f93edc1fc144a42d8b8377"
)
st_write(income_data_2020, "buffalo_income.geojson")
st_write(income_data_2020, "buffalo_income.geojson", append = FALSE)
st_write(income_data_2020, "buffalo_income.geojson", append = FALSE)
getwd()
st_write(income_data_2020, "buffalo_income2.geojson", append = FALSE)
v17 <- load_variables(2021, "acs5", cache = TRUE)
View(v17)
dim(clean)
dim(cleaned)
test<-data%>%
#head(100)%>%
ChargeIdentifier(., "Charge.Information", group_var = sym("Inmate.ID"), only_PL_VTL = T)%>%
filter(top_charge == T)%>%
mutate(address = trimws(Address))%>%
filter(!is.na(Address) & Address != "" & Address != "NULL"&
!grepl("Homeless", Address, ignore.case = TRUE))%>%
select(address, Inmate.ID)%>%
mutate(state = str_extract(address, "[A-Za-z]+(?=\\d{5})"),
state = ifelse(state == "YORK", "NEW YORK", state),
city = str_extract(address, "\\b\\w+\\b(?=\\s+NEW YORK)"),
city = ifelse(grepl("buf", city, ignore.case = T), "BUFFALO", city),
zip_code = str_extract(address, "\\d{5}$"),
street = str_extract(address, ".*(?=\\sBuffalo)|.*(?=\\sBUFFALO)"))%>%
filter(city == "BUFFALO")
ddim(test)
dim(test)
test2<-cxy_geocode(test, street = 'street', city = 'city', state = 'state', zip = 'zip_code',
return = 'locations', class = 'dataframe', output = 'simple')
cleaned<-test2%>%
filter(!is.na(cxy_lon))%>%
filter(state =="NEW YORK")%>%
filter(grepl("buffalo", city, ignore.case = T))
dim(cleaned)
write.csv(cleaned, "buffalo.csv")
